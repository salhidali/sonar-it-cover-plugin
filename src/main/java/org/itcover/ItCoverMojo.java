package org.itcover;

import java.io.File;
import java.io.IOException;
import java.io.StringReader;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.apache.http.auth.AuthenticationException;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.impl.auth.BasicScheme;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugins.annotations.Mojo;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

/**
 * Echos an object string to the output screen.
 * @goal itcover
 * @requiresProject false
 */

@Mojo(name="itcover")
public class ItCoverMojo extends AbstractMojo
{

	/**
	 * @parameter default-value="${project.groupId}:${project.artifactId}" expression="${itcover.project}"
	 */
	//@Parameter( property = "itcover.project", defaultValue = "admin" )
	private String project;

	/**
	 * @parameter default-value="it_coverage" expression="${itcover.metricKey}"
	 */
	private String metricKey;
	
	/**
	 * @parameter expression="${itcover.sonarUrl}"
	 */
	private String sonarUrl;
	
	/**
	 * @parameter default-value="admin" expression="${itcover.sonarUsername}"
	 */
	private String sonarUsername;
	
	/**
	 * @parameter default-value="admin" expression="${itcover.sonarPassword}"
	 */
	private String sonarPassword;

	/**
	 *@parameter default-value="${basedir}"
	 */
	private File basedir;
	
	/**
	 * Execution Data File (generated by jacoco)
	 * @parameter default-value="${project.build.directory}/jacoco-it.exec" expression="${itcover.executionDataFile}"
	 */
	private File executionDataFile;
	
	/**
     * The directory containing generated classes of the project being tested. This will be included after the test
     * classes in the test classpath.
     *
     * @parameter default-value="${project.build.outputDirectory}"
     */
	private File classesDirectory;
	
	/**
     * The source directory containing class sources.
     *
     * @parameter default-value="${project.build.sourceDirectory}"
     */
	private File sourceDirectory;
	
	/**
	 * @parameter default-value="${project.build.directory}/it-cover.xml" expression="${itcover.reportFile}"
	 */
	private File reportFile;
	
	/**
	 * @parameter default-value="false" expression="${itcover.coverPluginFailureIgnore}"
	 */
	private boolean coverPluginFailureIgnore;
	
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public void execute() throws MojoExecutionException, MojoFailureException {

		CloseableHttpClient client = HttpClients.createDefault();
		
		try {
			
			//Vérifier que le projet existe sur Sonar avant de lancer les traitements
			HttpGet projectGet = new HttpGet(sonarUrl+"/api/components/show?component="+project);
			
			ResponseHandler responseHandler = (ResponseHandler) new JSONResponseHandler();
			JSONObject responseBody = (JSONObject) client.execute(projectGet, responseHandler);
			
			JSONObject component = (JSONObject) responseBody.get("component");
			
			if(null == component) {
				getLog().error("The requested sonar project does not exist.");
				return;
			} 
			
			HttpGet httpGet = new HttpGet(sonarUrl+"/api/custom_measures/search?metric="+metricKey+"&projectKey="+project);
			responseBody = (JSONObject) executeHttpQuery(client, httpGet, responseHandler);
			JSONArray customMeasure = (JSONArray) responseBody.get("customMeasures");
			
			if(null != customMeasure && !customMeasure.isEmpty()) {// Si la custom métrique existe au niveau du projet la mettre à jour
				String id = (String) ((JSONObject) customMeasure.get(0)).get("id");
				HttpPost updatePost = new HttpPost(sonarUrl+"/api/custom_measures/update?id="+id+"&value="+getCoverage());
				executeHttpQuery(client, updatePost, responseHandler);
			} else {// Sinon il faut la créer et l'alimenter
				HttpPost createPost = new HttpPost(sonarUrl+"/api/custom_measures/create?metricKey="+metricKey+"&projectKey="+project+"&value="+getCoverage());
				executeHttpQuery(client, createPost, responseHandler);
			}
		}
		catch (IOException e) {
			processException(e);
		}
		catch (AuthenticationException e) {
			processException(e);
		}
		catch (ParserConfigurationException e) {
			processException(e);
		}
		catch (SAXException e) {
			processException(e);
		}
		finally {
			try {
				client.close();
			}
			catch (IOException e) {
				// ignore
			}
		}
	}

	private void processException(Exception e) throws MojoFailureException {
		getLog().error(e);
		if (!coverPluginFailureIgnore) {
			throw new MojoFailureException(e.getMessage());
		}
	}
	
	private <T> T executeHttpQuery(final CloseableHttpClient client, final HttpUriRequest httpRequest, final ResponseHandler<? extends T> responseHandler) throws IOException, AuthenticationException {
		BasicScheme basicScheme = new BasicScheme();
		UsernamePasswordCredentials creds = new UsernamePasswordCredentials(sonarUsername, sonarPassword);
		httpRequest.addHeader(basicScheme.authenticate(creds, httpRequest, null));
		return client.execute(httpRequest, responseHandler);
	}
	
	private double getCoverage() throws ParserConfigurationException, SAXException, IOException {
		final ReportGenerator generator = new ReportGenerator(basedir, executionDataFile, classesDirectory, sourceDirectory,	reportFile);
		generator.create();
		return computeCoverageFromXml(reportFile);
	}
	
	public double computeCoverageFromXml(File reportFile) throws ParserConfigurationException, SAXException, IOException {
		final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		double coverage = 0;
		final DocumentBuilder builder = factory.newDocumentBuilder();
		
		builder.setEntityResolver(new EntityResolver() {
	        @Override
	        public InputSource resolveEntity(String publicId, String systemId)
	                throws SAXException, IOException {
	            if (systemId.contains("report.dtd")) {
	                return new InputSource(new StringReader(""));
	            } else {
	                return null;
	            }
	        }
	    });
		
		final Document document= builder.parse(reportFile);
		final Element racine = document.getDocumentElement();

		final NodeList racineNoeuds = racine.getChildNodes();
		final int nbRacineNoeuds = racineNoeuds.getLength();

		for (int i = 0; i<nbRacineNoeuds; i++) {
			if(racineNoeuds.item(i).getNodeType() == Node.ELEMENT_NODE) {
				final Element counter = (Element) racineNoeuds.item(i);
				if(counter.getAttribute("type").equals("INSTRUCTION")) {
						int missed = Integer.parseInt(counter.getAttribute("missed"));
						int covered = Integer.parseInt(counter.getAttribute("covered"));
						
						coverage  = (covered * 100) / (covered + missed);
				}
			}
		}
		
		return coverage;
	}
 }